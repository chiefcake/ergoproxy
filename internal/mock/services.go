// Code generated by MockGen. DO NOT EDIT.
// Source: iface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/chiefcake/ergoproxy/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockProxyService is a mock of ProxyService interface.
type MockProxyService struct {
	ctrl     *gomock.Controller
	recorder *MockProxyServiceMockRecorder
}

// MockProxyServiceMockRecorder is the mock recorder for MockProxyService.
type MockProxyServiceMockRecorder struct {
	mock *MockProxyService
}

// NewMockProxyService creates a new mock instance.
func NewMockProxyService(ctrl *gomock.Controller) *MockProxyService {
	mock := &MockProxyService{ctrl: ctrl}
	mock.recorder = &MockProxyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProxyService) EXPECT() *MockProxyServiceMockRecorder {
	return m.recorder
}

// Redirect mocks base method.
func (m *MockProxyService) Redirect(ctx context.Context, request model.RedirectRequest) (model.RedirectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Redirect", ctx, request)
	ret0, _ := ret[0].(model.RedirectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Redirect indicates an expected call of Redirect.
func (mr *MockProxyServiceMockRecorder) Redirect(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Redirect", reflect.TypeOf((*MockProxyService)(nil).Redirect), ctx, request)
}
